#!/usr/bin/env bash
# jaRules AI Rules Setup
# Configure AI assistants with legendary rules and templates

set -euo pipefail

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m'

# Logging functions
log_info() { echo -e "${BLUE}[AI]${NC} $1"; }
log_success() { echo -e "${GREEN}[✓]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[⚠]${NC} $1"; }
log_error() { echo -e "${RED}[✗]${NC} $1"; }

# Get script directory
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly AI_RULES_DIR="$CONFIG_DIR/ai-rules"

# Create AI rules directory structure
create_ai_directories() {
    log_info "Creating AI rules directory structure"
    
    mkdir -p "$AI_RULES_DIR"/{templates,projects,active}
    mkdir -p "$AI_RULES_DIR"/templates/{cline,claude-code,cursor,continue,shared}
    mkdir -p "$AI_RULES_DIR"/prompt-library/{foundational,prd,common,project-types}
    
    log_success "AI rules directories created"
}

# Copy AI rules from repository
copy_ai_rules() {
    log_info "Copying AI rules and templates"
    
    local repo_ai_dir="$SCRIPT_DIR/../ai-rules"
    
    if [[ ! -d "$repo_ai_dir" ]]; then
        log_error "AI rules directory not found in repository"
        return 1
    fi
    
    # Copy entire AI rules structure
    cp -r "$repo_ai_dir"/* "$AI_RULES_DIR/"
    
    log_success "AI rules copied to $AI_RULES_DIR"
}

# Detect current project type
detect_project_type() {
    local project_dir="${1:-$PWD}"
    
    # Check for various project indicators
    if [[ -f "$project_dir/package.json" ]]; then
        # Node.js project
        if grep -q '"react"' "$project_dir/package.json" 2>/dev/null; then
            echo "react"
        elif grep -q '"vue"' "$project_dir/package.json" 2>/dev/null; then
            echo "vue"
        elif grep -q '"@angular/core"' "$project_dir/package.json" 2>/dev/null; then
            echo "angular"
        elif grep -q '"express"' "$project_dir/package.json" 2>/dev/null; then
            echo "node-api"
        else
            echo "node"
        fi
    elif [[ -f "$project_dir/requirements.txt" ]] || [[ -f "$project_dir/setup.py" ]]; then
        echo "python"
    elif [[ -f "$project_dir/Cargo.toml" ]]; then
        echo "rust"
    elif [[ -f "$project_dir/go.mod" ]]; then
        echo "go"
    elif [[ -f "$project_dir/composer.json" ]]; then
        echo "php"
    elif [[ -f "$project_dir/Gemfile" ]]; then
        echo "ruby"
    else
        echo "generic"
    fi
}

# Generate project-specific rules
generate_project_rules() {
    local project_type="${1:-generic}"
    local output_file="${2:-.clinerules}"
    
    log_info "Generating $project_type rules for $output_file"
    
    # Start with shared base rules
    local base_rules="$AI_RULES_DIR/templates/shared/base-rules.md"
    local project_rules="$AI_RULES_DIR/templates/project-types/$project_type.md"
    local tool_specific=""
    
    # Determine tool-specific rules based on output file
    case "$output_file" in
        ".clinerules")
            tool_specific="$AI_RULES_DIR/templates/cline/cline-rules.md"
            ;;
        ".cursorrules")
            tool_specific="$AI_RULES_DIR/templates/cursor/cursor-rules.md"
            ;;
        ".claude-code-rules")
            tool_specific="$AI_RULES_DIR/templates/claude-code/claude-code-rules.md"
            ;;
        ".aider.conf.yml")
            tool_specific="$AI_RULES_DIR/templates/aider/aider-rules.yml"
            ;;
    esac
    
    # Combine rules (create files if they don't exist)
    {
        echo "# AI Assistant Rules - Generated by jaRules"
        echo "# Project Type: $project_type"
        echo "# Generated: $(date)"
        echo ""
        
        if [[ -f "$base_rules" ]]; then
            cat "$base_rules"
        else
            echo "## Base Rules"
            echo "Follow jaRules' legendary standards for code quality and developer experience."
        fi
        
        echo ""
        echo "---"
        echo ""
        
        if [[ -f "$project_rules" ]]; then
            cat "$project_rules"
        else
            echo "## Project-Specific Rules ($project_type)"
            echo "Apply best practices for $project_type development."
        fi
        
        echo ""
        echo "---"
        echo ""
        
        if [[ -f "$tool_specific" ]]; then
            cat "$tool_specific"
        fi
    } > "$output_file"
    
    log_success "Generated $output_file"
}

# Setup Cline rules
setup_cline() {
    log_info "Setting up Cline AI assistant rules"
    
    local cline_rules_file=".clinerules"
    local template_file="$AI_RULES_DIR/templates/cline/cline-rules.md"
    
    # Create template if it doesn't exist
    if [[ ! -f "$template_file" ]]; then
        mkdir -p "$(dirname "$template_file")"
        cat > "$template_file" << 'EOF'
# jaRules Cline Configuration

## Core Behavior
You are working with jaRules - the legendary development environment. Channel jaRules' confidence, precision, and commitment to excellence in every interaction.

## Project Understanding
- Analyze the project structure before making changes
- Respect existing patterns and conventions
- Suggest improvements that align with jaRules' philosophy

## Code Standards
- Modern, secure, performant code only
- Comprehensive error handling
- Clear naming and documentation
- Test coverage for new features

## Workflow
1. Understand the requirement fully
2. Plan the implementation
3. Execute with precision
4. Verify the results
5. Document the changes

## Security
- Never commit secrets
- Validate all inputs
- Use secure defaults
- Follow principle of least privilege

Remember: You're not just writing code - you're crafting solutions that embody jaRules' legendary standards.
EOF
        log_success "Created Cline rules template"
    fi
}

# Setup Cursor rules
setup_cursor() {
    log_info "Setting up Cursor AI rules"
    
    local cursor_rules_file=".cursorrules"
    local template_file="$AI_RULES_DIR/templates/cursor/cursor-rules.md"
    
    # Create template if it doesn't exist
    if [[ ! -f "$template_file" ]]; then
        mkdir -p "$(dirname "$template_file")"
        cat > "$template_file" << 'EOF'
# jaRules Cursor Configuration

You are configured with jaRules' legendary standards. Every suggestion should reflect:

- **Modern best practices** - Use the latest stable features
- **Security first** - Never compromise on security
- **Performance aware** - Efficient code is beautiful code
- **Developer experience** - Code should be a joy to work with

## Code Style
- Clear, descriptive names
- Consistent formatting
- Meaningful comments
- Comprehensive error handling

## Architecture
- SOLID principles
- DRY without over-abstraction
- Testable design
- Clear separation of concerns

Embody the jaRules philosophy in every line of code.
EOF
        log_success "Created Cursor rules template"
    fi
}

# Setup Claude Desktop MCP servers
setup_mcp_servers() {
    log_info "Setting up Claude Desktop MCP servers"
    
    local claude_config_dir
    case "$(uname -s)" in
        Darwin*)
            claude_config_dir="$HOME/Library/Application Support/Claude"
            ;;
        Linux*)
            claude_config_dir="$CONFIG_DIR/claude"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            claude_config_dir="$HOME/AppData/Roaming/Claude"
            ;;
    esac
    
    if [[ ! -d "$claude_config_dir" ]]; then
        log_warning "Claude Desktop config directory not found"
        log_info "Please ensure Claude Desktop is installed"
        return
    fi
    
    local mcp_config_file="$claude_config_dir/claude_desktop_config.json"
    
    # Create MCP configuration
    cat > "$mcp_config_file" << EOF
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "$HOME/Developer"]
    },
    "git": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-git"]
    },
    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_TOKEN": "\${GITHUB_TOKEN}"
      }
    }
  }
}
EOF
    
    log_success "MCP servers configured for Claude Desktop"
}

# Create AI initialization command
create_ai_init_command() {
    log_info "Creating jarule AI initialization command"
    
    local jarule_bin="$HOME/.local/bin"
    mkdir -p "$jarule_bin"
    
    # Create the jarule command for AI operations
    cat > "$jarule_bin/jarule" << 'EOF'
#!/usr/bin/env bash
# jaRules AI Command Interface

set -euo pipefail

# Colors
readonly BLUE='\033[0;34m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

# Commands
case "${1:-help}" in
    "ai-init")
        tool="${2:-cline}"
        project_type="${3:-auto}"
        
        if [[ "$project_type" == "auto" ]]; then
            # Auto-detect project type
            if [[ -f "package.json" ]]; then
                project_type="node"
            elif [[ -f "requirements.txt" ]]; then
                project_type="python"
            else
                project_type="generic"
            fi
        fi
        
        echo -e "${BLUE}[jaRules]${NC} Initializing $tool rules for $project_type project"
        
        case "$tool" in
            "cline")
                rules_file=".clinerules"
                ;;
            "cursor")
                rules_file=".cursorrules"
                ;;
            "claude-code")
                rules_file=".claude-code-rules"
                ;;
            *)
                echo -e "${RED}Unknown tool: $tool${NC}"
                exit 1
                ;;
        esac
        
        # Generate rules file
        ~/.config/ai-rules/scripts/generate-rules.sh "$project_type" "$rules_file"
        echo -e "${GREEN}✓${NC} Created $rules_file"
        ;;
        
    "ai-sync")
        echo -e "${BLUE}[jaRules]${NC} Syncing AI configurations"
        # Sync all AI tool configurations
        for tool in cline cursor claude-code; do
            echo "Updating $tool configuration..."
        done
        echo -e "${GREEN}✓${NC} AI configurations synced"
        ;;
        
    "prompts")
        action="${2:-list}"
        template="${3:-}"
        
        case "$action" in
            "list")
                echo -e "${BLUE}Available prompt templates:${NC}"
                echo "  - foundational-requirements"
                echo "  - prd-template"
                echo "  - code-review"
                echo "  - debugging"
                echo "  - optimization"
                ;;
            "add")
                if [[ -z "$template" ]]; then
                    echo -e "${RED}Please specify a template${NC}"
                    exit 1
                fi
                echo -e "${BLUE}[jaRules]${NC} Adding $template to project"
                # Copy template to current directory
                ;;
        esac
        ;;
        
    "help"|*)
        echo "jaRules AI Command Interface"
        echo ""
        echo "Commands:"
        echo "  jarule ai-init [tool] [type]   Initialize AI rules for current project"
        echo "  jarule ai-sync                 Sync AI configurations"
        echo "  jarule prompts list            List available prompt templates"
        echo "  jarule prompts add <template>  Add prompt template to project"
        echo ""
        echo "Tools: cline, cursor, claude-code"
        echo "Types: node, react, python, go, rust (or auto)"
        ;;
esac
EOF
    
    chmod +x "$jarule_bin/jarule"
    log_success "Created jarule command"
}

# Create sample prompt templates
create_prompt_templates() {
    log_info "Creating prompt template library"
    
    # Create a sample foundational requirements template
    local foundational_dir="$AI_RULES_DIR/prompt-library/foundational"
    mkdir -p "$foundational_dir"
    
    if [[ ! -f "$foundational_dir/system-requirements.md" ]]; then
        cp "$SCRIPT_DIR/../ai-rules/prompt-library/foundational/system-requirements.md" \
           "$foundational_dir/system-requirements.md" 2>/dev/null || {
            cat > "$foundational_dir/system-requirements.md" << 'EOF'
# System Requirements Template

## Project Overview
- **Name**: [Project Name]
- **Type**: [Web App / API / CLI / Library]
- **Stack**: [Technology choices]

## Functional Requirements
[List key features and capabilities]

## Non-Functional Requirements
- **Performance**: [Response time, throughput targets]
- **Security**: [Authentication, authorization, data protection]
- **Scalability**: [User/data growth projections]
- **Reliability**: [Uptime requirements]

## Technical Architecture
[High-level architecture decisions]

## Success Criteria
[How we measure success]
EOF
        }
    fi
    
    log_success "Prompt templates ready"
}

# Main setup function
main() {
    log_info "🚀 Starting jaRules AI rules setup..."
    
    create_ai_directories
    copy_ai_rules
    setup_cline
    setup_cursor
    setup_mcp_servers
    create_ai_init_command
    create_prompt_templates
    
    # Detect current project and offer to create rules
    local current_project_type=$(detect_project_type)
    if [[ "$current_project_type" != "generic" ]]; then
        echo ""
        log_info "Detected $current_project_type project in current directory"
        read -p "Create AI rules for this project? (y/N) " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            generate_project_rules "$current_project_type" ".clinerules"
            generate_project_rules "$current_project_type" ".cursorrules"
        fi
    fi
    
    log_success "🎉 AI rules setup completed!"
    log_info "💡 Use 'jarule ai-init' to initialize AI rules for any project"
    log_info "💡 Find templates in $AI_RULES_DIR"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
